---
name: ollama
version: v0.6.6
base: core24
summary: Get up and running with large language models locally.
description: |
  Run Llama 2, Code Llama, and other models. Customize and create your own.
adopt-info: ollama
grade: stable
confinement: strict
license: MIT
platforms:
  amd64:
  arm64:

package-repositories:
  - type: apt
    formats: [deb]
    architectures: [amd64]
    path: /
    key-id: EB693B3035CD5710E231E123A4B469963BF863CC
    url: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/x86_64
  - type: apt
    formats: [deb]
    architectures: [arm64]
    path: /
    key-id: EB693B3035CD5710E231E123A4B469963BF863CC
    url: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/arm64

apps:
  ollama:
    command: bin/snap_launcher.sh
    plugs:
      - home
      - removable-media
      - network
      - network-bind
      - opengl # grants also CUDA based GPU access
    environment:
      LD_LIBRARY_PATH: "$SNAP/lib/ollama:$SNAP/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR:/var/lib/snapd/lib/gl${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
  listener:
    command: bin/snap_launcher.sh serve
    daemon: simple
    install-mode: enable
    restart-condition: on-failure
    refresh-mode: restart
    plugs:
      - home
      - removable-media
      - network
      - network-bind
      - opengl
    environment:
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
      LD_LIBRARY_PATH: "$SNAP/lib/ollama:$SNAP/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR:/var/lib/snapd/lib/gl${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"

parts:
  launcher:
    plugin: dump
    source: ./snap/local
    organize:
      snap_launcher.sh: bin/snap_launcher.sh

  ollama:
    plugin: cmake
    source: https://github.com/ollama/ollama.git
    source-type: git
    source-tag: $SNAPCRAFT_PROJECT_VERSION
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=""
    # build packages (not staged) because ollama copies in cudnn, cublas etc
    build-packages:
      - git
      - gcc
      - cmake
      - sed
      - libcudnn9-cuda-12
      - libcudnn9-dev-cuda-12
      - on amd64:
        - cuda-cudart-dev-12-8
        - cuda-driver-dev-12-8
        - cuda-toolkit-12-8
        - nvidia-cuda-dev
        - libcublas-12-8
        - libcublas-dev-12-8
        - tensorrt-libs
        - tensorrt-dev
    build-snaps:
      - go/stable
    build-environment:
      - LD_LIBRARY_PATH: "/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/nvidia/:/usr/local/cuda/lib64/${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
      - PATH: "/usr/local/cuda/bin${PATH:+:$PATH}"
      - CGO_CFLAGS: '-O3'
      - CGO_CXXFLAGS: '-O3'
      - GOFLAGS: '-ldflags=-w'
      - OLLAMA_COMMON_BUILD_ARGS: "--build-arg=$SNAPCRAFT_PROJECT_VERSION --build-arg=GOFLAGS --build-arg=OLLAMA_CUSTOM_CPU_DEFS --build-arg=OLLAMA_SKIP_CUDA_GENERATE --build-arg=OLLAMA_SKIP_CUDA_11_GENERATE --build-arg=OLLAMA_SKIP_CUDA_12_GENERATE --build-arg=CUDA_V11_ARCHITECTURES --build-arg=CUDA_V12_ARCHITECTURES --build-arg=OLLAMA_SKIP_ROCM_GENERATE --build-arg=OLLAMA_FAST_BUILD --build-arg=CUSTOM_CPU_FLAGS --build-arg=GPU_RUNNER_CPU_FLAGS --build-arg=AMDGPU_TARGETS"
      - CGO_ENABLED: '1'
      - GOBIN: ${CRAFT_PART_INSTALL}/bin
    override-build: |
      craftctl default
      go generate -C $CRAFT_PART_SRC ./...
      go install -C $CRAFT_PART_SRC ./...
